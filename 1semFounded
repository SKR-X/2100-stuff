using System;

namespace ConsoleApp10
{
    class Program
    {

        static int maxPlace(int[,] matrix, int maxi, int maxj)
        {
            int c = 0;
            for (int i = 0; i < matrix.GetLength(0) / 2; i++)
            {
                for (int j = 1; j < matrix.GetLength(1); j++)
                {
                    c++;
                    if (i == maxi && j == maxj)
                    {
                        return c;
                    }
                }
            }
            return 0;
        }
        static int minPlace(int[,] matrix, int mini, int minj)
        {
            int c = 1;
            for (int i = matrix.GetLength(0) / 2; i < matrix.GetLength(0); i++)
            {
                for (int j = 1; j < matrix.GetLength(1); j++)
                {
                    c++;
                    if (i == mini && j == minj)
                    {
                        return c;
                    }
                }
            }
            return 0;
        }
        static void Main(string[] args)
        {
            int[,] matrix = { {5,3,10,2,1},
                  {1,2,3,4,5},
                  {1,2,3,4,5},
                  {1,2,3,4,5},
            {1,2,-30,4,5},
            {1,2,3,4,5}};
            int max = 0, maxi = 0, maxj = 0, mini = matrix.GetLength(0) / 2, minj = 0, min = 0;
            int c = 0;
            for (int i = 0; i < matrix.GetLength(0) / 2; i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (matrix[i, j] > max)
                    {
                        max = matrix[i, j];
                        maxi = i;
                        maxj = j;
                    }
                }
            }

            int maxPlaceC = maxPlace(matrix, maxi, maxj);

            min = matrix[matrix.GetLength(0) / 2, 0];
            for (int i = matrix.GetLength(0) / 2; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    if (matrix[i, j] < min)
                    {
                        min = matrix[i, j];
                        mini = i;
                        minj = j;
                    }
                }
            }
            int minPlaceC = minPlace(matrix, mini, minj);


            int[] firstMas = new int[(matrix.GetLength(0)/2)*matrix.GetLength(1)];
            int[] secMas = new int[(matrix.GetLength(0) / 2) * matrix.GetLength(1)];
            c = 0;
            for (int i = 0; i < matrix.GetLength(0) / 2; i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    firstMas[c] = matrix[i,j];
                    c++;
                }
            }

            c = 0;
            for (int i = matrix.GetLength(0) / 2; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    secMas[c] = matrix[i, j];
                    c++;
                }
            }

            var element = 1;
            var pointer = 2;
            while (element < firstMas.Length)
            {
                if (element == 0 || firstMas[element] >= firstMas[element - 1])
                {
                    element = pointer;
                    pointer++;
                }
                else
                {
                    var temp = firstMas[element - 1];
                    firstMas[element - 1] = firstMas[element];
                    firstMas[element] = temp;
                    element--;
                }
            }

            var step = secMas.Length / 2;

            while (step > 0)
            {
                for (int i = step; i < secMas.Length; i++)
                {
                    int j = i;
                    while ((j >= step) && secMas[j - step] < secMas[j])
                    {
                        var temp = secMas[j - step];
                        secMas[j - step] = secMas[j];
                        secMas[j] = temp;
                        j -= step;
                    }
                }
                step /= 2;
            }
            c = 0;
            int[] inpMas2 = new int[firstMas.Length];
            for (int i = 0; i < minPlaceC; i++)
            {
                inpMas2[i] = secMas[c];
                c++;
            }
            for (int i = minPlaceC + 1; i < inpMas2.Length; i++)
            {
                inpMas2[i] = secMas[c];
                c++;
            }
            inpMas2[minPlaceC] = min;
            c = 0;
            for (int i = matrix.GetLength(0) / 2; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    matrix[i, j] = inpMas2[c];
                    c++;
                }
            }
            c = 0;
            int[] inpMas = new int[firstMas.Length];
            for (int i = 0; i < maxPlaceC; i++)
            {
                inpMas[i] = firstMas[c];
                c++;
            }
            for (int i = maxPlaceC+1; i < inpMas.Length; i++)
            {
                inpMas[i] = firstMas[c];
                c++;
            }
            inpMas[maxPlaceC] = max;
            c = 0;
            for (int i = 0; i < matrix.GetLength(0)/2; i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    matrix[i, j] = inpMas[c];
                    c++;
                }
            }
            c = 0;
            for (int i = matrix.GetLength(0) / 2; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    matrix[i, j] = inpMas2[c];
                    c++;
                }
            }

            for (int i = 0; i < matrix.GetLength(0); i++)
            {
                for (int j = 0; j < matrix.GetLength(1); j++)
                {
                    Console.Write($"{matrix[i,j]} ");
                }
                Console.WriteLine();
            }

            Console.WriteLine();


        }
    }
}
